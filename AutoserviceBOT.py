import logging
from datetime import datetime, timedelta
import sqlite3
from dotenv import load_dotenv
load_dotenv(dotenv_path="TELEGRAM_BOT_TOKEN.env")
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler, CallbackQueryHandler
from telegram.ext import ContextTypes
import re
from telegram import ReplyKeyboardRemove
import os
import hashlib
import smtplib
from email.mime.text import MIMEText

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
CHOOSING_SERVICE, GETTING_CONTACT, CHOOSING_DATE, CHOOSING_TIME, DESCRIPTION, CONFIRM_BOOKING, GETTING_EMAIL_AFTER_CONFIRM = range(7)
ADMIN_AUTH, ADMIN_ACTION, VIEW_BOOKINGS, ADD_SERVICE, REMOVE_SERVICE = range(5, 10)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
SERVICE_CALLBACK = "service_"
DATE_CALLBACK = "date_"
TIME_CALLBACK = "time_"
CONFIRM_CALLBACK = "confirm_"
ADMIN_CALLBACK = "admin_"
DELETE_BOOKING = "delete_"
ADMIN_CHAT_ID = 966063834 
SMTP_SERVER = 'smtp.yandex.ru'
SMTP_PORT = 465
EMAIL_SENDER = 'SpectrumTradeBot@yandex.ru'
EMAIL_PASSWORD = 'dkhcateivqohiuhg'
EMAIL_RECEIVER = 'spectrumtradebot@gmail.com'


    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ª—É–≥
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS services (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT,
        price REAL
    )
    ''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        user_name TEXT,
        phone_number TEXT,
        service_id INTEGER,
        service_name TEXT,
        date TEXT,
        time TEXT,
        description TEXT,
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (service_id) REFERENCES services (id)
    )
    ''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY,
        user_id INTEGER UNIQUE,
        username TEXT,
        password TEXT,
        is_superadmin INTEGER DEFAULT 0
    )
    ''')
    #–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤
    cursor.execute('''
CREATE TABLE IF NOT EXISTS feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    user_name TEXT,
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å–ª—É–≥ –≤ —Ç–∞–±–ª–∏—Ü–µ, –µ—Å–ª–∏ –ø—É—Å—Ç–æ - –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª—É–≥–∏
    cursor.execute("SELECT COUNT(*) FROM services")
    if cursor.fetchone()[0] == 0:
        services = [
            ("–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –∏ –º–∞—Å–ª—è–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞", 1500.0),
            ("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏", "–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ö–æ–¥–æ–≤–æ–π —á–∞—Å—Ç–∏", 1000.0),
            ("–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫", "–ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫", 2000.0),
            ("–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è", 1800.0),
            ("–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω", 2500.0),
            ("–†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ", "–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–µ—Å", 3000.0),
        ]
        cursor.executemany("INSERT INTO services (name, description, price) VALUES (?, ?, ?)", services)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    cursor.execute("SELECT COUNT(*) FROM admins")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO admins (user_id, username, password, is_superadmin) VALUES (?, ?, ?, ?)", 
                       (123456789, "admin", "admin123", 1))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –∏–∑ –ë–î
def get_services():
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, description, price FROM services")
    services = cursor.fetchall()
    conn.close()
    return services

def hash_phone_number(phone: str) -> str:
    return hashlib.sha256(phone.encode('utf-8')).hexdigest()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ –ø–æ ID
def get_service_by_id(service_id):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, description, price FROM services WHERE id = ?", (service_id,))
    service = cursor.fetchone()
    conn.close()
    return service

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
def add_service(name, description, price):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO services (name, description, price) VALUES (?, ?, ?)", 
                   (name, description, price))
    conn.commit()
    conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –ø–æ ID
def remove_service(service_id):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM services WHERE id = ?", (service_id,))
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
def create_booking(user_id, user_name, phone_number, service_id, service_name, date, time, description):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()

    # –•—ç—à–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    hashed_phone = hash_phone_number(phone_number)

    cursor.execute('''
    INSERT INTO bookings (user_id, user_name, phone_number, service_id, service_name, date, time, description)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, user_name, hashed_phone, service_id, service_name, date, time, description))
    
    booking_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return booking_id

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_bookings(user_id):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
    SELECT id, service_name, date, time, status FROM bookings
    WHERE user_id = ? AND status != 'cancelled' ORDER BY date, time
''', (user_id,))
    bookings = cursor.fetchall()
    conn.close()
    return bookings

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
def get_all_bookings():
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, user_name, phone_number, service_name, date, time, description, status
        FROM bookings
        WHERE status != 'cancelled'
        ORDER BY date, time
    ''')
    bookings = cursor.fetchall()
    conn.close()
    return bookings

# –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def cancel_booking_by_id(booking_id):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE bookings SET status = 'cancelled' WHERE id = ?", (booking_id,))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_superadmin FROM admins WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def check_admin_password(user_id, password):
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_superadmin FROM admins WHERE user_id = ? AND password = ?", (user_id, password))
    result = cursor.fetchone()
    conn.close()
    return result is not None

#–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤
LEAVING_FEEDBACK = 20  # –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def feedback_command(update: Update, context: CallbackContext) -> int:
    cancel_keyboard = ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        reply_markup=cancel_keyboard
    )
    return LEAVING_FEEDBACK

async def save_feedback(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    text = update.message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO feedback (user_id, user_name, message) VALUES (?, ?, ?)",
                   (user.id, user.first_name, text))
    conn.commit()
    conn.close()

    main_menu = ReplyKeyboardMarkup(
        [
            ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"],
            ["‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", "‚ùì –ü–æ–º–æ—â—å"],
            ["üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"]
        ],
        resize_keyboard=True
    )

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu
    )

    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    user_name = update.effective_user.first_name

    keyboard = [
    ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"],
    ["‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", "‚ùì –ü–æ–º–æ—â—å"],
    ["üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"]
]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞.\n\n"
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É ‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É ‚ùì –ü–æ–º–æ—â—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏\n"
    )

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)

        def get_main_menu(is_admin=False):
            keyboard = [
                ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"],
                ["‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", "‚ùì –ü–æ–º–æ—â—å"],
                ["üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n"
        "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ\n"
        "‚ùì –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

# –ö–æ–º–∞–Ω–¥–∞ /info
async def info_command(update: Update, context: CallbackContext) -> None:
    keyboard = [
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üí≠ –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üîß *–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å \"–°–ø–µ–∫—Ç—Ä-—Ç—Ä–µ–π–¥\"* üîß\n\n"
        "*–ê–¥—Ä–µ—Å:* –≥.–û–º—Å–∫ —É–ª. 2-—è –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–∞—è, 63–ê\n"
        "*–¢–µ–ª–µ—Ñ–æ–Ω:* +7 983 626-83-65\n"
        "*–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:* –ü–Ω-–ü—Ç —Å 8:00 –¥–æ 20:00 –°–± —Å 8:00 –¥–æ 14:00\n\n"
        "*–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*\n"
        "- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç\n"
        "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n"
        "- –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂\n"
        "- –ö—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç\n"
        "- –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "- –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n\n"
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
async def book_command(update: Update, context: CallbackContext) -> int:
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if 'booking_data' in context.user_data:
        context.user_data.pop('booking_data')

    context.user_data['booking_data'] = {}

    services = get_services()
    keyboard = []

    for service_id, name, description, price in services:
        keyboard.append([InlineKeyboardButton(f"{name} - {price:.2f} —Ä—É–±.", callback_data=f"{SERVICE_CALLBACK}{service_id}")])
    inline_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–∑–¥–∞—ë–º reply-–∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    cancel_reply_markup = ReplyKeyboardMarkup(
        [["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=cancel_reply_markup
    )

    await update.message.reply_text(
        "–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
        reply_markup=inline_markup
    )

    return CHOOSING_SERVICE
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async def service_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return ConversationHandler.END
    
    service_id = int(query.data.replace(SERVICE_CALLBACK, ""))
    service = get_service_by_id(service_id)
    
    if not service:
        await query.edit_message_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['booking_data']['service_id'] = service_id
    context.user_data['booking_data']['service_name'] = service[1]
    context.user_data['booking_data']['service_price'] = service[3]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service[1]} ({service[3]:.2f} —Ä—É–±.)\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX."
    )
    
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    contact_keyboard = ReplyKeyboardMarkup(
    [
        [
            {"text": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True},
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"
        ]
    ],
    one_time_keyboard=True,
    resize_keyboard=True
    )

    
    await query.message.reply_text(
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        reply_markup=contact_keyboard
    )
    
    return GETTING_CONTACT

def send_email(phone_number, user_name, service_name, date, time):
    body = (
        f"üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n"
        f"–ò–º—è: {user_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"–£—Å–ª—É–≥–∞: {service_name}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {time}"
    )

    msg = MIMEText(body)
    msg['Subject'] = '–ó–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞'
    msg['From'] = EMAIL_SENDER
    msg['To'] = EMAIL_RECEIVER

    try:
        server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.send_message(msg)
        server.quit()
        print("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", e)

def send_email_to_client(email, user_name, service_name, date, time):
    body = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
        f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É: {service_name}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {time}\n\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å!"
    )

    msg = MIMEText(body)
    msg['Subject'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏'
    msg['From'] = EMAIL_SENDER
    msg['To'] = email

    try:
        server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.send_message(msg)
        server.quit()
        print(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É: {email}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –∫–ª–∏–µ–Ω—Ç—É: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    if update.message.contact:
        phone_number = update.message.contact.phone_number
    else:
        phone_number = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
        if not re.fullmatch(r"\+7\d{10}", phone_number):
            await update.message.reply_text(
                "–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX."
            )
            return GETTING_CONTACT

    logger.info("–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user.first_name, phone_number)

    context.user_data['booking_data']['phone_number'] = phone_number
    context.user_data['booking_data']['user_name'] = user.first_name

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    booking = context.user_data['booking_data']

    if update.message:
        await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    keyboard = []
    today = datetime.now().date()
    added = 0
    i = 1  # –Ω–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è

# –î–æ–±–∞–≤–∏–º –º–∞–∫—Å–∏–º—É–º 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–ü–Ω‚Äì–°–±), –∏—Å–∫–ª—é—á–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6)
    while added < 7:
        booking_date = today + timedelta(days=i)
        weekday = booking_date.weekday()  # 0 - –ü–Ω, ..., 6 - –í—Å

        if weekday < 6:  # –ü–Ω‚Äì–°–±
            date_str = booking_date.strftime("%d.%m.%Y")
            date_callback = booking_date.strftime("%Y-%m-%d")
            keyboard.append([InlineKeyboardButton(date_str, callback_data=f"{DATE_CALLBACK}{date_callback}")])
            added += 1  # ‚Üê —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º

        i += 1  # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–≤–∏–≥–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é


    reply_markup = InlineKeyboardMarkup(keyboard)

    cancel_reply_markup = ReplyKeyboardMarkup(
    [["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

    await update.message.reply_text(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
    reply_markup=reply_markup
)

    await update.message.reply_text(
    "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
    reply_markup=cancel_reply_markup  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Reply-–∫–Ω–æ–ø–∫—É
)

    return CHOOSING_DATE

    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def date_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return ConversationHandler.END

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    date_str = query.data.replace(DATE_CALLBACK, "")
    context.user_data['booking_data']['date'] = date_str

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –ë–î
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT time FROM bookings WHERE date = ? AND status != 'cancelled'", (date_str,))
    taken_times = {row[0] for row in cursor.fetchall()}
    conn.close()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    weekday = datetime.strptime(date_str, "%Y-%m-%d").weekday()

    interval = 1  # –û–±—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π)

    if weekday == 5:  # –°—É–±–±–æ—Ç–∞
        start_hour = 8
        end_hour = 14
    else:
        start_hour = 8
        end_hour = 19

    keyboard = []
    for hour in range(start_hour, end_hour, interval):
        time_str = f"{hour:02d}:00"
        if time_str in taken_times:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ
        keyboard.append([InlineKeyboardButton(time_str, callback_data=f"{TIME_CALLBACK}{time_str}")])

    if not keyboard:
        keyboard.append([InlineKeyboardButton("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=reply_markup
    )

    # –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"
    
    reply_markup=ReplyKeyboardMarkup(
            [["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"]],
            resize_keyboard=True,
            one_time_keyboard=False
        )

    return CHOOSING_TIME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def time_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
    time_str = query.data.replace(TIME_CALLBACK, "")
    context.user_data['booking_data']['time'] = time_str
    
    from telegram import ReplyKeyboardMarkup

    reply_markup = ReplyKeyboardMarkup(
    [["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"]],
    resize_keyboard=True,
    one_time_keyboard=False
)
    reply_markup = ReplyKeyboardMarkup(
    [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

    await query.edit_message_text(
    f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {time_str}"
)

    await query.message.reply_text(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
    reply_markup=reply_markup
)
    
    return DESCRIPTION

# –ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è
async def skip_description(update: Update, context: CallbackContext) -> int:
    context.user_data['booking_data']['description'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    return await show_booking_confirmation(update, context)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
async def get_description(update: Update, context: CallbackContext) -> int:
    description = update.message.text
    context.user_data['booking_data']['description'] = description
    
    return await show_booking_confirmation(update, context)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def show_booking_confirmation(update: Update, context: CallbackContext) -> int:
    booking_data = context.user_data['booking_data']
    
    confirmation_text = (
        "*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏*\n\n"
        f"*–£—Å–ª—É–≥–∞:* {booking_data['service_name']}\n"
        f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {booking_data['service_price']:.2f} —Ä—É–±.\n"
        f"*–î–∞—Ç–∞:* {booking_data['date']}\n"
        f"*–í—Ä–µ–º—è:* {booking_data['time']}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {booking_data['phone_number']}\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {booking_data['description']}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å."
    )
    
    keyboard = [
    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{CONFIRM_CALLBACK}yes")],
]
    reply_markup = ReplyKeyboardMarkup(
    [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"]],
    resize_keyboard=True,
    one_time_keyboard=False
)
    
    if update.message:
        await update.message.reply_text(
        confirmation_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    else:
        await update.callback_query.message.reply_text(
        confirmation_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return CONFIRM_BOOKING

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def confirm_booking(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    
    choice = query.data.replace(CONFIRM_CALLBACK, "")
    
    if choice == "no":
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    booking_data = context.user_data['booking_data']
    booking_id = create_booking(
        update.effective_user.id,
        booking_data['user_name'],
        booking_data['phone_number'],
        booking_data['service_id'],
        booking_data['service_name'],
        booking_data['date'],
        booking_data['time'],
        booking_data['description']
    )
    
    main_menu = ReplyKeyboardMarkup(
    [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
    resize_keyboard=True,
    one_time_keyboard=False
)
    booking_data = context.user_data.get("booking_data")
    booking_id = create_booking(booking_data)
    
    await query.edit_message_text(
    f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
    f"–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: *{booking_id}*\n\n"
    f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {booking_data['service_name']} {booking_data['date']} –≤ {booking_data['time']}.\n\n"
    f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {booking_data['phone_number']} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.",
    parse_mode='Markdown'
)

# –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await query.message.reply_text("–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", reply_markup=main_menu)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if 'booking_data' in context.user_data:
        context.user_data.pop('booking_data')
    
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def my_bookings(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    bookings = get_user_bookings(user_id)
    
    if not bookings:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return
    
    message = "*–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n"
    
    for booking_id, service_name, date, time, status in bookings:
        status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if status == "confirmed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        
        message += (
            f"*–ó–∞–ø–∏—Å—å #{booking_id}*\n"
            f"–£—Å–ª—É–≥–∞: {service_name}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date} –≤ {time}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        )
    
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
async def cancel_booking_request(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    bookings = get_user_bookings(user_id)
    
    if not bookings:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    message = "*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:*\n\n"
    keyboard = []

    for booking_id, service_name, date, time, status in bookings:
        status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if status == "confirmed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        message += (
            f"*–ó–∞–ø–∏—Å—å #{booking_id}*\n"
            f"–£—Å–ª—É–≥–∞: {service_name}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date} –≤ {time}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        )
        keyboard.append([
            InlineKeyboardButton(
                f"üóë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å #{booking_id}",
                callback_data=f"{DELETE_BOOKING}{booking_id}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_user_booking(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_booking_menu":
        await query.edit_message_text("‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    booking_id = int(query.data.replace(DELETE_BOOKING, ""))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É–¥–∞–ª—è–µ–º–æ–π –∑–∞–ø–∏—Å–∏
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
    SELECT user_name, phone_number, service_name, date, time, description
    FROM bookings WHERE id = ?
    ''', (booking_id,))
    booking = cursor.fetchone()
    conn.close()

    if booking:
        user_name, phone, service, date, time, description = booking

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ email
        try:
            body = (
                f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                f"–ò–º—è: {user_name}\n"
                f"–£—Å–ª—É–≥–∞: {service}\n"
                f"–î–∞—Ç–∞: {date}\n"
                f"–í—Ä–µ–º—è: {time}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )

            msg = MIMEText(body)
            msg['Subject'] = f'‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ #{booking_id}'
            msg['From'] = EMAIL_SENDER
            msg['To'] = EMAIL_RECEIVER

            server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)
            server.quit()
            print(f"Email –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –∞–¥–º–∏–Ω—É: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=(
            f"‚ùå *–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
            f"*–ò–º—è:* {user_name}\n"
            f"*–£—Å–ª—É–≥–∞:* {service}\n"
            f"*–î–∞—Ç–∞:* {date}\n"
            f"*–í—Ä–µ–º—è:* {time}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}"
        ),
        parse_mode='Markdown'
    )

    cancel_booking_by_id(booking_id)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    user_id = update.effective_user.id
    bookings = get_user_bookings(user_id)

    if not bookings:
        await query.edit_message_text("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    message = f"‚úÖ –ó–∞–ø–∏—Å—å #{booking_id} —É–¥–∞–ª–µ–Ω–∞.\n\n*–í–∞—à–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏:*\n\n"
    keyboard = []

    for bid, service_name, date, time, status in bookings:
        status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if status == "confirmed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        message += (
            f"*–ó–∞–ø–∏—Å—å #{bid}*\n"
            f"–£—Å–ª—É–≥–∞: {service_name}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date} –≤ {time}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        )
        keyboard.append([
            InlineKeyboardButton(f"üóë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å #{bid}", callback_data=f"{DELETE_BOOKING}{bid}")
        ])

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞"
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

# –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_command(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

    await show_admin_panel(update, context)
    return ConversationHandler.END

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_auth(update: Update, context: CallbackContext) -> int:
    password = update.message.text
    user_id = update.effective_user.id
    
    if check_admin_password(user_id, password):
        await show_admin_panel(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def show_admin_panel(update: Update, context: CallbackContext) -> None:
    keyboard = [
    [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", callback_data=f"{ADMIN_CALLBACK}view_bookings")],
    [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data=f"{ADMIN_CALLBACK}manage_services")],
    [InlineKeyboardButton("–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"{ADMIN_CALLBACK}feedbacks")],  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ
    [InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data=f"{ADMIN_CALLBACK}exit")]
]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_actions(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    action = query.data.replace(ADMIN_CALLBACK, "")
    
    if action == "exit":
        await query.edit_message_text("–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    elif action == "view_bookings":
        bookings = get_all_bookings()
        
        if not bookings:
            await query.edit_message_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n\n"
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ [–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞](/admin)"
            )
            return
        
        message = "*–í—Å–µ –∑–∞–ø–∏—Å–∏:*\n\n"
        
        for booking_id, user_name, phone, service, date, time, description, status in bookings:
            status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if status == "confirmed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            
            message += (
                f"*–ó–∞–ø–∏—Å—å #{booking_id}*\n"
                f"–ö–ª–∏–µ–Ω—Ç: {user_name}\n"
                f"–£—Å–ª—É–≥–∞: {service}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date} –≤ {time}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            )
        
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{ADMIN_CALLBACK}back_to_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif action == "manage_services":
        services = get_services()
        
        message = "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:*\n\n"
        
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data=f"{ADMIN_CALLBACK}add_service")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{ADMIN_CALLBACK}back_to_panel")]
        ]
        
        for service_id, name, description, price in services:
            message += f"*{name}* - {price:.2f} —Ä—É–±.\n{description}\n\n"
            keyboard.insert(-1, [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å '{name}'", callback_data=f"{ADMIN_CALLBACK}remove_service_{service_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif action == "back_to_panel":
        await show_admin_panel(update, context)
    
    elif action.startswith("remove_service_"):
        service_id = int(action.replace("remove_service_", ""))
        remove_service(service_id)
        
        await query.edit_message_text(
            f"–£—Å–ª—É–≥–∞ #{service_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        
    elif action == "add_service":
        context.user_data['admin_action'] = 'add_service'
        await query.edit_message_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –¶–µ–Ω–∞\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ó–∞–º–µ–Ω–∞ –∫–æ–ª–æ–¥–æ–∫ | –ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫, –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ | 2500"
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
        return ADD_SERVICE
    
    elif action == "feedbacks":
        conn = sqlite3.connect('autoservice_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, user_name, message, created_at FROM feedback ORDER BY created_at DESC LIMIT 10")
        feedbacks = cursor.fetchall()
        conn.close()

        if not feedbacks:
            await query.edit_message_text("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
            return

        message = "*–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
        keyboard = []

        for index, (fid, user, msg, created) in enumerate(feedbacks, start=1):
            message += f"*{index}. üë§ {user}* ({created.split()[0]}):\n{msg}\n\n"
            keyboard.append([
                InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ {index}", callback_data=f"{ADMIN_CALLBACK}delete_feedback_{fid}")
            ])

        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{ADMIN_CALLBACK}back_to_panel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    elif action.startswith("delete_feedback_"):
        feedback_id = int(action.replace("delete_feedback_", ""))
        conn = sqlite3.connect('autoservice_bot.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM feedback WHERE id = ?", (feedback_id,))
        conn.commit()

        cursor.execute("SELECT id, user_name, message, created_at FROM feedback ORDER BY created_at DESC LIMIT 10")
        feedbacks = cursor.fetchall()
        conn.close()

        if not feedbacks:
            await query.edit_message_text("–í—Å–µ –æ—Ç–∑—ã–≤—ã —É–¥–∞–ª–µ–Ω—ã.")
            return

        message = "‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.\n\n*–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤:*\n\n"
        keyboard = []

        for index, (fid, user, msg, created) in enumerate(feedbacks, start=1):
            message += f"*{index}. üë§ {user}* ({created.split()[0]}):\n{msg}\n\n"
            keyboard.append([
                InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ {index}", callback_data=f"{ADMIN_CALLBACK}delete_feedback_{fid}")
            ])

        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{ADMIN_CALLBACK}back_to_panel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
async def add_service_handler(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    parts = text.split('|')
    
    if len(parts) != 3:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –¶–µ–Ω–∞\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ó–∞–º–µ–Ω–∞ –∫–æ–ª–æ–¥–æ–∫ | –ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫, –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ | 2500"
        )
        return ADD_SERVICE
    
    name = parts[0].strip()
    description = parts[1].strip()
    
    try:
        price = float(parts[2].strip())
    except ValueError:
        await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADD_SERVICE
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –ë–î
    add_service(name, description, price)
    
    await update.message.reply_text(
        f"‚úÖ –£—Å–ª—É–≥–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: CallbackContext) -> int:
    user_name = update.effective_user.first_name

    # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_menu = ReplyKeyboardMarkup(
        [
           ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"],
    ["‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", "‚ùì –ü–æ–º–æ—â—å"],
    ["üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"]
        ],
        resize_keyboard=True
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    await update.message.reply_text(
        f"{user_name}, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=main_menu
    )

    return ConversationHandler.END

async def confirm_booking_text(update: Update, context: CallbackContext) -> int:
    # –°–æ–∑–¥–∞—ë–º "—Ñ–µ–π–∫–æ–≤—ã–π" callback_query —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    class DummyQuery:
        def __init__(self, update):
            self.data = f"{CONFIRM_CALLBACK}yes"
            self.message = update.message
            self.from_user = update.effective_user

        async def answer(self):
            pass

        async def edit_message_text(self, *args, **kwargs):
            await self.message.reply_text(*args, **kwargs)

    dummy_query = DummyQuery(update)
    return await confirm_booking_from_text(dummy_query, update, context)

async def confirm_booking_from_text(query, update: Update, context: CallbackContext) -> int:
    await query.answer()

    choice = query.data.replace(CONFIRM_CALLBACK, "")

    if choice == "no":
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return ConversationHandler.END

    booking_data = context.user_data['booking_data']
    booking_id = create_booking(
        update.effective_user.id,
        booking_data['user_name'],
        booking_data['phone_number'],
        booking_data['service_id'],
        booking_data['service_name'],
        booking_data['date'],
        booking_data['time'],
        booking_data['description']
    )
    if 'email' in booking_data:
        send_email_to_client(
        booking_data['email'],
        booking_data['user_name'],
        booking_data['service_name'],
        booking_data['date'],
        booking_data['time']
    )

    main_menu = ReplyKeyboardMarkup(
    [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

    await query.edit_message_text(
    f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
    f"–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: *{booking_id}*\n\n"
    f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {booking_data['service_name']} {booking_data['date']} –≤ {booking_data['time']}.\n\n"
    f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {booking_data['phone_number']} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.",
    parse_mode='Markdown'
)

    await query.message.reply_text("–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    send_email(
        booking_data['phone_number'],
        booking_data['user_name'],
        booking_data['service_name'],
        booking_data['date'],
        booking_data['time']
    )

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=(
            f"üìû –ù–æ–≤–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞\n\n"
            f"–ò–º—è: {booking_data['user_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['phone_number']}\n"
            f"–£—Å–ª—É–≥–∞: {booking_data['service_name']}\n"
            f"–î–∞—Ç–∞: {booking_data['date']}\n"
            f"–í—Ä–µ–º—è: {booking_data['time']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {booking_data['description']}"
        )
    )

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ email
    keyboard = ReplyKeyboardMarkup(
        [["–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await query.message.reply_text(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@mail.ru.\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['last_booking'] = {
        'user_name': booking_data['user_name'],
        'service_name': booking_data['service_name'],
        'date': booking_data['date'],
        'time': booking_data['time']
    }

    # –û—á–∏—â–∞–µ–º booking_data
    if 'booking_data' in context.user_data:
        context.user_data.pop('booking_data')

    return GETTING_EMAIL_AFTER_CONFIRM

async def handle_email_or_skip(update: Update, context: CallbackContext) -> int:
    text = update.message.text.strip()

    if text.lower() == "–Ω–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.‚úÖ",
            reply_markup=ReplyKeyboardMarkup(
                [["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"], ["‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", "‚ùì –ü–æ–º–æ—â—å"]],
                resize_keyboard=True
            )
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not re.fullmatch(r"[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+", text):
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
            reply_markup=ReplyKeyboardMarkup(
                [["–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
                resize_keyboard=True
            )
        )
        return GETTING_EMAIL_AFTER_CONFIRM

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    booking = context.user_data.get('last_booking')
    if booking:
        send_email_to_client(
            text,
            booking['user_name'],
            booking['service_name'],
            booking['date'],
            booking['time']
        )

    await update.message.reply_text(
        "‚úÖ –ö–æ–ø–∏—è –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É.",
        reply_markup=ReplyKeyboardMarkup(
            [["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"], ["‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", "‚ùì –ü–æ–º–æ—â—å"]],
            resize_keyboard=True
        )
    )

    context.user_data.pop('last_booking', None)
    return ConversationHandler.END

def send_email_to_client(email, user_name, service_name, date, time):
    body = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
        f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É: {service_name}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {time}\n\n"
        f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å!"
    )

    msg = MIMEText(body)
    msg['Subject'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏'
    msg['From'] = EMAIL_SENDER
    msg['To'] = email

    try:
        server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.send_message(msg)
        server.quit()
        print(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É: {email}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –∫–ª–∏–µ–Ω—Ç—É: {e}")

async def show_feedbacks(update: Update, context: CallbackContext) -> None:
    conn = sqlite3.connect('autoservice_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_name, message, created_at FROM feedback ORDER BY created_at DESC LIMIT 5")
    feedbacks = cursor.fetchall()
    conn.close()

    if not feedbacks:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:*\n\n"
    for name, message, created_at in feedbacks:
        formatted_time = created_at.split(" ")[0]
        text += f"üë§ *{name}* ({formatted_time}):\n{message}\n\n"

    keyboard = [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")


    

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:

    print("–†–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ë–î:", os.path.abspath("autoservice_bot.db"))
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("mybookings", my_bookings))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏$"), my_bookings))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ$"), info_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), help_command))
    application.add_handler(CallbackQueryHandler(start, pattern="^back_to_menu$"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üí≠ –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$"), show_feedbacks))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), start))
    fallbacks=[
    CommandHandler("cancel", cancel),
    MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏$"), cancel)
    ],
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤
    feedback_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$"), feedback_command)],
    states={
        LEAVING_FEEDBACK: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, save_feedback)
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏$"), cancel),
    ],
)
    application.add_handler(feedback_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    booking_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è$"), book_command)],
    states={
        CHOOSING_SERVICE: [CallbackQueryHandler(service_choice)],
        GETTING_CONTACT: [
            MessageHandler(filters.CONTACT, get_contact),
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏$"), cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏$"), get_contact),
        ],
        CHOOSING_DATE: [CallbackQueryHandler(date_choice)],
        CHOOSING_TIME: [CallbackQueryHandler(time_choice)],
        DESCRIPTION: [
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏$"), cancel),
            MessageHandler(filters.TEXT & filters.Regex("^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$"), skip_description),
            CommandHandler("skip", skip_description),
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_description),
        ],
        
        CONFIRM_BOOKING: [
            CallbackQueryHandler(confirm_booking),
            MessageHandler(filters.TEXT & filters.Regex("^‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å$"), confirm_booking_text),
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏$"), cancel),
        ],
        GETTING_EMAIL_AFTER_CONFIRM: [
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email_or_skip)
],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏$"), cancel),
    ]
)
    application.add_handler(booking_conv_handler)

    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("secretcommand", admin_command)],
        states={
            ADD_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_service_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(admin_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(cancel_booking_request, pattern="^cancel_booking$"))
    application.add_handler(CallbackQueryHandler(delete_user_booking, pattern=f"^{DELETE_BOOKING}"))
    application.add_handler(CallbackQueryHandler(admin_actions, pattern=f"^{ADMIN_CALLBACK}"))
    application.add_handler(CallbackQueryHandler(start, pattern="^cancel$"))
    
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()